// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  workouts  Workout[]
}

model Workout {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  notes     String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  exercises WorkoutExercise[]
}

model Exercise {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String   // "strength", "cardio", "flexibility", "balance", "sports", "other"
  muscleGroup String[] // e.g., ["pectorals", "triceps", "shoulders"]
  notes       String?  // Optional notes for the exercise
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workoutExercises WorkoutExercise[]
}

model WorkoutExercise {
  id         String   @id @default(cuid())
  workoutId  String
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  sets       Set[]
  
  @@unique([workoutId, exerciseId, order])
}

model Set {
  id                String          @id @default(cuid())
  workoutExerciseId String
  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
  setNumber         Int
  reps              Int?
  weight            Float?
  duration          Int?            // in seconds, for time-based exercises
  distance          Float?          // in meters, for distance-based exercises
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@unique([workoutExerciseId, setNumber])
}
